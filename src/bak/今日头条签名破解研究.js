/*
在正常浏览器和非正常浏览器（webdriver驱动的浏览器）中打开 https://www.toutiao.com/ch/car_new_arrival/
在network中ctrl+F搜索 _signature
在 lib_7403688.js 中找
o.data._signature = utils.tacSign(o.url, o.data)),
继续在这个文件搜 utils.tacSign
    tacSign: function(e, t) {
        var n = "";
        /^http/.test(e) || (/\/toutiao\//.test(e) || (e = "/toutiao" + e),
        e = location.protocol + "//" + location.host + e);
        for (var r in t)
            n += "&" + r + "=" + encodeURIComponent(t[r]);
        e += e.indexOf("?") > -1 ? e.indexOf("&") > -1 ? n : n.slice(1) : "?" + n.slice(1);
        var o = {
            url: e
        }
          , i = window.byted_acrawler.sign ? window.byted_acrawler.sign(o) : "";
        return i
    }
发现最终调用的 byted_acrawler.sign

在console中输入
console.log(byted_acrawler.sign)
点击下面输出的函数体
会打开一个VM窗口
复制并美化VM窗口中的js代码
加了一些调试用的日志代码，得到下面的代码

然后分别在正常和非正常控制台中复制运行下面魔改后的js内容

正常浏览器中能找到这样的日志
z13e(TAC_STR, 312, 8, , [object Object], null)
z13e(TAC_STR, 312, 8, , [object Object], null) => false
z13e(TAC_STR, 1702, 97, , [object Object], null) => false
z13e(TAC_STR, 1914, 256, , [object Object], null)
caller: function Object() { [native code] }
method: defineProperty
args: [object Navigator],webdriver,[object Object]
result: [object Navigator]

caller: location
method: match
args: /\$[a-z]dc_/
result: null

caller: searchForm
method: match
args: /\$[a-z]dc_/
result: null

caller: close
method: match
args: /\$[a-z]dc_/
result: null

caller: open
method: match
args: /\$[a-z]dc_/
result: null

caller: write
method: match
args: /\$[a-z]dc_/
result: null

caller: writeln
method: match
args: /\$[a-z]dc_/
result: null

z13e(TAC_STR, 1914, 256, , [object Object], null) => false
z13e(TAC_STR, 2856, 155, , [object Object], null)
z13e(TAC_STR, 312, 8, , [object Object], null)
z13e(TAC_STR, 312, 8, , [object Object], null) => false

非正常浏览器中类似的日志
z13e(TAC_STR, 312, 8, , [object Object], null)
z13e(TAC_STR, 312, 8, , [object Object], null) => false
z13e(TAC_STR, 1702, 97, , [object Object], null) => false
z13e(TAC_STR, 1914, 256, , [object Object], null)
z13e(TAC_STR, 1914, 256, , [object Object], null) => true
z13e(TAC_STR, 2856, 155, , [object Object], null)
z13e(TAC_STR, 312, 8, , [object Object], null)
z13e(TAC_STR, 312, 8, , [object Object], null) => false

对比发现， z13e(TAC_STR, 1914, 256, , [object Object], null) 这一步调用结果是关键，经过试验，直接hook返回false签名就成功通过了
 */

var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ?
    function(e) {
        return typeof e
    }: function(e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol": typeof e
    };
TAC = function() {
    function e(e, f, b, c, d, r) {
        null == r && (r = this);
        var n, i, o = {},
            l = o.d = d ? d.d + 1 : 0;
        for (o["$" + l] = o, i = 0; i < l; i++) o[n = "$" + i] = d[n];
        for (i = 0, l = o.length = c.length; i < l; i++) o[i] = c[i];
        const res = a(e, f, b, o, r);
        return res[1]
    }
    function a(r, o, l, t, v, y) {
        function h(e) {
            S[++A] = e
        }
        function k() {
            return S[A--]
        }
        function m(e, a) {
            for (var f = b,
                     c = "",
                     d = 0; d < e.length; d++) {
                var r = e.charCodeAt(d);
                c += String.fromCharCode(f ^ r),
                    f = (f << 1) + d + a + 1 + (f >> 1) & 255
            }
            return c
        }
        null == v && (v = this);
        var g, C, x, I, S = [],
            A = 0;
        y && (g = y);
        for (var w = o + 2 * l; o < w;) {
            var z = 13 * i(r, o) % 241;
            if (o += 2, 0 == (3 & z)) if (0 == (3 & (z >>= 2))) {
                if (0 == (z >>= 2))
                    return [1, S[A--]];
                if (2 == z) oprand = n(r, o),
                    o += 2 * oprand[0],
                    I = oprand[1],
                    S[++A] = +I;
                else if (4 == z)
                    g = S[A--],
                        S[A] = S[A] * g;
                else if (6 == z)
                    g = S[A--],
                        S[A] = S[A] != g;
                else if (13 == z) {
                    C = S[A--];
                    x = S[A--];
                    if ((I = S[A--]).x === a) {
                        // 破解关键
                        // if (I.pc === 1914 && I.len === 256) {
                        //     S[++A] = false;
                        // }
                        // else
                            {
                            const callStr = `z13e(TAC_STR, ${I.pc}, ${I.len}, ${C}, ${I.z}, ${x})`;
                            console.log(callStr);
                            const res = e(r, I.pc, I.len, C, I.z, x);
                            S[++A] = res;
                            console.log(callStr + " => " + res);
                        }
                    }
                    else {
                        const res = I.apply(x, C);
                        S[++A] = res;
                        console.log(`caller: ${x}\nmethod: ${I.name}\nargs: ${C}\nresult: ${res}\n`);
                    }
                }
                else {
                    if (15 != z) break;
                    oprand = n(r, o),
                        I = oprand[1],
                        S[A] = function(f, b) {
                            var c = function a() {
                                var f = arguments;
                                return e(r, a.pc, a.len, f, a.z, this)
                            };
                            return c.pc = f,
                                c.len = b,
                                c.x = a,
                                c.z = t,
                                c
                        } (o + 6, I - 4),
                        o += 2 * I - 2
                }
            } else if (1 == (3 & z))
                if (3 == (z >>= 2))
                    g = S[--A],
                        S[A] = g(S[A + 1]);
                else if (5 == z)
                    S[A -= 1] = S[A][S[A + 1]];
                else if (7 == z)
                    S[A] = --S[A];
                else {
                    if (9 != z)
                        break;
                    g = S[A--],
                        S[A] = typeof g
                } else if (2 == (3 & z))
                if (6 == (z >>= 2))
                    S[A] = u(S[A]);
                else if (8 == z)
                    g = S[A--],
                        oprand = n(r, o),
                        o += 2 * oprand[0],
                        S[A--][m(f[oprand[1]], oprand[1])] = g;
                else {
                    if (10 != z) {
                        if (12 == z) throw S[A--];
                        break
                    }
                    S[A] = ~S[A]
                } else if (0 == (z >>= 2))
                S[++A] = null;
            else if (2 == z)
                g = S[A--],
                    S[A] = S[A] >= g;
            else if (9 == z)
                g = k(),
                    C = k(),
                    t[0] = 65599 * t[0] + t[g].charCodeAt(C) >>> 0;
            else if (11 == z)
                S[++A] = void 0;
            else {
                if (13 != z) break;
                g = S[A--],
                    S[A] = S[A] && g
            } else if (1 == (3 & z)) if (0 == (3 & (z >>= 2))) {
                if (4 == (z >>= 2)) {
                    oprand = n(r, o),
                        I = oprand[1];
                    try {
                        if (c[d][2] = 1, 1 == (g = a(r, o + 6, I - 4, t, v))[0])
                            return g
                    } catch(y) {
                        if (c[d] && c[d][1] && 1 == (g = a(r, c[d][1][0], c[d][1][1], t, v, y))[0])
                            return g
                    } finally {
                        if (c[d] && c[d][0] && 1 == (g = a(r, c[d][0][0], c[d][0][1], t, v))[0])
                            return g;
                        c[d] = 0,
                            d--
                    }
                    o += 2 * I - 2
                } else if (6 == z) oprand = n(r, o),
                    o += 2 * oprand[0],
                    I = oprand[1],
                    S[A -= I] = p("x,y", "return new x[y](" + Array(I + 1).join(",x[++y]").substr(1) + ")")(S, A);
                else if (8 == z) g = S[A--],
                    S[A] = S[A] & g;
                else if (10 != z) break
            } else if (1 == (3 & z)) if (0 == (z >>= 2))
                S[A] = !S[A];
            else if (7 == z)
                C = S[A--],
                    g = delete S[A--][C];
            else if (9 == z) {
                oprand = n(r, o);
                o += 2 * oprand[0];
                key = m(f[oprand[1]], oprand[1]);
                // console.log(key);
                S[A] = S[A][key];
            }
            else {
                if (11 != z)
                    break;
                g = S[A--],
                    S[A] = S[A] << g
            } else if (2 == (3 & z)) if (1 == (z >>= 2))
                S[++A] = g;
            else if (3 == z)
                g = S[A--],
                    S[A] = S[A] <= g;
            else if (10 == z)
                g = S[A -= 2][S[A + 1]] = S[A + 2],
                    A--;
            else if (12 == z)
                g = S[A],
                    S[++A] = g;
            else {
                if (14 != z)
                    break;
                g = S[A--],
                    S[A] = S[A] || g
            } else if (0 == (z >>= 2))
                S[A] = !S[A];
            else if (2 == z)
                oprand = n(r, o),
                    o += 2 * (I = oprand[1]) - 2;
            else if (4 == z)
                g = S[A--],
                    S[A] = S[A] / g;
            else if (6 == z)
                g = S[A--],
                    S[A] = S[A] !== g;
            else {
                if (13 != z)
                    break;
                S[++A] = v
            } else if (2 == (3 & z)) if (0 == (3 & (z >>= 2))) if (1 == (z >>= 2))
                g = S[A--],
                    S[A] = S[A] > g;
            else if (8 == z)
                oprand = n(r, o),
                    o += 2 * oprand[0],
                    I = oprand[1],
                    C = A + 1,
                    S[A -= I - 1] = I ?
                        S.slice(A, C) :
                        [];
            else if (10 == z)
                oprand = n(r, o),
                    o += 2 * oprand[0],
                    I = oprand[1],
                    g = S[A--],
                    t[I] = g;
            else {
                if (12 != z)
                    break;
                g = S[A--],
                    S[A] = S[A] >> g
            } else if (1 == (3 & z)) if (0 == (z >>= 2))
                S[++A] = s;
            else if (2 == z)
                g = S[A--],
                    S[A] = S[A] + g;
            else if (4 == z)
                g = S[A--],
                    S[A] = S[A] == g;
            else if (11 == z)
                oprand = n(r, o),
                    o += 2 * oprand[0],
                    I = oprand[1],
                    S[--A] = p("x,y", "return x " + m(f[I], I) + " y")(S[A], S[A + 1]);
            else {
                if (13 != z)
                    break;
                g = S[A - 1],
                    C = S[A],
                    S[++A] = g,
                    S[++A] = C
            } else if (2 == (3 & z)) if (1 == (z >>= 2))
                oprand = n(r, o),
                    o += 2 * oprand[0],
                    S[++A] = m(f[oprand[1]], oprand[1]);
            else if (3 == z)
                S[A--] ?
                    o += 6 :
                    (oprand = n(r, o), o += 2 * (I = oprand[1]) - 2);
            else if (5 == z)
                g = S[A--],
                    S[A] = S[A] % g;
            else if (7 == z)
                g = S[A--],
                    S[A] = S[A] instanceof g;
            else {
                if (14 != z)
                    break;
                S[++A] = !1
            } else if (4 == (z >>= 2))
                oprand = n(r, o),
                    I = oprand[1],
                    c[d][0] && !c[d][2] ?
                        c[d][1] = [o + 6, I - 4] :
                        c[d++] = [0, [o + 6, I - 4], 0],
                    o += 2 * I - 2;
            else if (6 == z)
                oprand = n(r, o),
                    o += 2 * oprand[0],
                    I = oprand[1],
                    S[++A] = t["$" + I];
            else {
                if (8 != z)
                    break;
                g = S[A--],
                    S[A] = S[A] | g
            } else if (0 == (3 & (z >>= 2))) if (1 == (z >>= 2))
                oprand = n(r, o),
                    o += 2 * oprand[0],
                    I = oprand[1],
                    S[++A] = +m(f[I], I);
            else if (3 == z)
                g = S[A--],
                    S[A] = S[A] - g;
            else if (5 == z)
                g = S[A--],
                    S[A] = S[A] === g;
            else if (12 == z) {
                C = S[A--];
                x = S[A--];
                if ((I = S[A--]).x === a) {
                    const callStr = `z12e(TAC_STR, ${I.pc}, ${I.len}, ${C}, ${I.z}, ${x})`;
                    console.log(callStr);
                    const res = e(r, I.pc, I.len, C, I.z, x);
                    S[++A] = res;
                    console.log(callStr + " => " + res);
                }
                else {
                    const res = I.apply(x, C);
                    S[++A] = res;
                    console.log(`caller: ${x}\nmethod: ${I.name}\nargs: ${C}\nresult: ${res}\n`);
                }
            }
            else {
                if (14 != z)
                    break;
                g = S[A],
                    S[A] = S[A - 1],
                    S[A - 1] = g
            } else if (1 == (3 & z)) if (2 == (z >>= 2))
                h(function(e) {
                    var a = 0,
                        f = e.length;
                    return function() {
                        var b = a < f;
                        b && h(e[a++]),
                            h(b)
                    }
                } (S[A]));
            else if (4 == z)
                oprand = n(r, o),
                    o += 2 * oprand[0],
                    I = oprand[1],
                    g = t[I],
                    S[++A] = g;
            else if (6 == z)
                S[A] = ++S[A];
            else {
                if (8 != z)
                    break;
                g = S[A--],
                    S[A] = S[A] in g
            } else if (2 == (3 & z)) if (5 == (z >>= 2));
            else if (7 == z)
                g = S[A--];
            else if (9 == z)
                g = S[A--],
                    S[A] = S[A] ^ g;
            else {
                if (11 != z)
                    break;
                oprand = n(r, o),
                    I = oprand[1],
                    c[++d] = [[o + 6, I - 4], 0, 0],
                    o += 2 * I - 2
            } else if (1 == (z >>= 2))
                g = S[A--],
                    S[A] = S[A] < g;
            else if (8 == z)
                oprand = n(r, o),
                    o += 2 * oprand[0],
                    I = oprand[1],
                    S[A] = S[A][I];
            else if (10 == z)
                S[++A] = !0;
            else {
                if (12 != z)
                    break;
                g = S[A--],
                    S[A] = S[A] >>> g
            }
        }
        return [0, null]
    }
    var f = [],
        b = 0,
        c = [],
        d = 0,
        r = function(e, a) {
            var f = "" + e[a++] + e[a];
            return parseInt(f, 16)
        },
        n = function(e, a) {
            var f = e[a++],
                b = e[a],
                c = parseInt("" + f + b, 16);
            if (c >> 7 == 0) return c >> 6 != 0 && (c = -64 | 63 & c),
                [1, c];
            if (c >> 6 == 2) {
                var d = parseInt("" + e[++a] + e[++a], 16);
                return 0 != (32 & c) ? c = -32 | 31 & c: c &= 31,
                    c <<= 8,
                    d = c + d,
                    [2, d]
            }
            if (c >> 6 == 3) {
                var r = parseInt("" + e[++a] + e[++a], 16),
                    n = parseInt("" + e[++a] + e[++a], 16);
                return 0 != (32 & c) ? c = -32 | 31 & c: c &= 31,
                    c <<= 16,
                    r <<= 8,
                    n = c + r + n,
                    [3, n]
            }
        },
        i = function(e, a) {
            var f = e[a++],
                b = e[a];
            return parseInt("" + f + b, 16)
        },
        o = function(e, a) {
            var f = "" + e[a++] + e[a];
            return f = parseInt(f, 16),
                String.fromCharCode(f)
        },
        l = function(e, a, f) {
            for (var b = "",
                     c = 0; c < f; c++) b += o(e, a),
                a += 2;
            return b
        },
        t = function(e, a, b) {
            for (var c = 0; c < b; c++) {
                var d = n(e, a);
                a += 2 * d[0];
                var r = l(e, a, d[1]);
                f.push(r),
                    a += 2 * d[1]
            }
        },
        s = this,
        p = s.Function,
        u = Object.keys ||
            function(e) {
                var a = {},
                    f = 0;
                for (var b in e) a[f++] = b;
                return a.length = f,
                    a
            };
    return function(a) {
        a.length;
        for (var c = 0,
                 d = "",
                 i = c; i < c + 16;) d += o(a, i),
            i += 2;
        if ("HNOJ@?RC" != d) throw new Error("error magic number " + d);
        n(a, c += 16);
        c += 8,
            b = 0;
        for (var l = 0; l < 4; l++) {
            var s = r(a, c + 2 * l);
            b += (3 & s) << 2 * l
        }
        c += 16;
        var p = n(a, c += 16),
            u = p[1],
            v = c += 2 * p[0];
        c += p[1];
        var y = n(a, c);
        y[1];
        c += 2 * y[0],
            f = [],
            t(a, c, y[1]),
            e(a, v, u, [])
    }
} (),
    TAC("484e4f4a403f52430030182f3fb9584312ac680f0000000000000000c05f54020025806d4421131e014302023e22170d44441c21131e0343020440170f44441801131e01041c1680474421131e054302063e22170a44441c131e051e0717164444131e052602010a0118010a02101c161e444418002201170644441c131f0018011800131e081a001d0927041c002611020025c02f32020a250c4444131e0b1e0c0101001f06020d250d444421131e0e43020440001f07020f25805144131e10021102121a02221e1324131e140a010f2201173744441c0200251144441800221e15240a000f02163e00131e17012201171844441c21131e174302044022170a44441c131e171e1804001f08021925114444131e1a1a00221e1b240a000f001f09021c253a44442118004302043e2201170944441c1800263e1707444402000021180043021d3e171344441800170a4444021e16064444021f001800001f0a022025804b441801011708444402211f0102001f0618001f071807150039172c444418061801131e22221e2324131e22221e24240a000f18011e252a0a010f19281f0618072e1f0716511806001f0b02262580ce4402041f0621134318063e2201171044441c13221e15240a000f0227402201171744441c131e081e281e15221e2924130a010f0227402201170d44441c21131e0b4318063e2201171b44441c131e0b221e15240a000f221e2a24022b0a010f15003a2201170d44441c21131e2c4318063e2201171244441c131e2c221e15240a000f022d402201170d44441c21131e2e4318063e1706444420001b010b06260a0010011726444421131e2f4318063e2201171244441c131e2f221e15240a000f02304017064444200012001f0c023125809744131e321a001f06131e08221e332418060234131e081a00220200250c44441b020b00201d35001d360a030f1c131e37221e3824023918060a020f1c1322170844441c131e3722170a44441c131e371e3a170944441800201d351b010b07260a0010173144441322172244441c131e3b131e3c29158064392201171044441c131e3d131e3e2915806439170944441800201d35001f0d023f252d444421131e80404302044022171e44441c131e081e281e15221e2924131e80401e80410a010f0280423e001f0e028043258065441b010b06260a00100117805644028044131e2c42012201171144441c131e2c1e8044131e804541012201170a44441c02804613422201170a44441c02804713422201170a44441c02804813422201171044441c028049134202804a13423a0012001f0f02804b25810444131e2c1e804c1706444420004604444406094444271f062000052f44440233131e084217244444131e08221e3324131e2c02804c131e081a0022211d804d22121d804e0a030f1c0702804f0280500280510280520280530280540280550280560280570280580280590a0b1f0602805a02805b02805c0a031f07180708031f0818082104171944441f0918071809191f0a13180a191706444420001665180608031f0818082104171b44441f0918061809191f0a131e0b180a191706444420001663131e0b08031f0818082104173144441f091809221e805d24131e1002805e02001a020a010f22170e44441c131e0b1809191e805f170644442000164d12001f100280602580c9441b010b07260a001017284444131e8061221e80622402130a010f1f0618060200250d44441b020b00201d8063001d80641b010b08260a001017805c4446044444062d4444271f0618061e8065131e80661e80673e22170e44441c131e80681e2515003e170a44441800201d806305274444131e8068221e80692402806a02000a020f1c131e8068221e806b2402806a0a010f1c071b010b06260a001017284444131e80610122171444441c131e806c2201170944441c131e806d170a44441800201d8063001f1102806e25809f441b010b06260a00100117809044131e0b221e806f240280700a010f1f0618061e8071221e15240a000f221e807224131e100280730280741a0202000a020f221e2a240280750a010f15003a2201173344441c131e2c1e15221e15240a000f221e807224131e100280730280741a0202000a020f221e2a240280750a010f15003a2201171644441c131e2c1e8044221e15240a000f028076400012001f1202807725809b44131e081a0022121d807822121d3522121d807922121d807a22121d804c22121d806322121d807b2202807c2506444420001f0718071d131f0618061b010b0c260a00101d807818061e807801178048441b010b0d1806041c1b010b111806041c18061b010b0e260a00101d807918061b010b0f260a00101d807a18061b010b10260a00101d804c18061b010b12260a00101d807b1806001f1302807d25805b44131e08221e807e2418000a010f1f0615001f0718061e251501291f081808150039173344441800180618081919170a444415011606444415001f09180918061e25180829150129331807301f0718082e1f08164a1807001f1402807f2536444415001f06180618011e253a17244444180015c1003f2a1801221e80802418060a010f281500351f0018062d1f0616571800001f150280812536444415001f06180618011e253a1724444418001801221e80802418060a010f3115c1003f2a1500351f0018062d1f0616571800001f160280822580704418002201170744441c02001f061806221e807224131e1002808302001a0202000a020f1f061806221e2a240280840a010f157f40172044441806221e80852415001806221e2a240280840a010f0a020f1606444418061f061806170a44441806160744440280861f061806001f170280872580aa4418002201170744441c02001f061806221e805d24131e1002808802001a020a010f1f0718071716444418070b00221e80852415010a010f1606444402001f061806171544441806221e80892402808a0a010f16054444261f08131e081a001f0918081780414415001f0a180a18081e253a1732444418091808180a19221e80892402808b0a010f0b001808180a19221e80892402808b0a010f0b010d180a2d1f0a16491809001f1802808c25808e441800012201171744441c131e808d221e808e2418000a010f02808f3e170a4444131e081a0000131e08221e807e2418000a010f221e8090240a000f1f06131e081a001f0715001f08180818061e253a173844441801171b44441807180618081918001806180819190200280d161444441807180618081918001806180819190d18082d1f0816431807001f19028091258078441800012201171744441c131e808d221e808e2418000a010f02808f3e17074444020000131e08221e807e2418000a010f221e8090240a000f1f0602001f0715001f08180818061e253a17284444180718061808190a0102808b2818001806180819192802808a28281f0718082d1f0816531807001f1a028092258181440280931f0618011708444418011f0602001f0715001f0918001e2518091503283b1780aa441800221e8080241809222d1f090a010f1580ff2f1510331800221e8080241809222d1f090a010f1580ff2f150833301800221e8080241809222d1f090a010f1580ff2f301f0818071806221e80942418081480952f1512340a010f281f0718071806221e809424180815c3f0002f150c340a010f281f0718071806221e8094241808158fc02f1506340a010f281f0718071806221e8094241808153f2f0a010f281f0716bf4f18001e251809291500391780a5441800221e8080241809222d1f090a010f1580ff2f15103318001e25180939171b44441800221e80802418090a010f1580ff2f150833160644441500301f0818071806221e80942418081480952f1512340a010f281f0718071806221e809424180815c3f0002f150c340a010f281f07180718001e25180939171b44441806221e8094241808158fc02f1506340a010f1607444402808b281f07180702808b281f071807001f1b02809625804c441800153f2f1f00131e8097221e80982418001800151a3a170b444415804116254444180015343a170b4444158047161544441800153e3a170a4444157c16064444156f280a010f001f1c028099253444441b010b1c1f06180618001518340418061800151234042818061800150c340428180618001506340428180618000428001f1d02809a2580c244131e0b221e806f240280700a010f1f07180715301d809b180715101d809c1807221e809d2402809e0a010f1f08180802809f1d80a01808221e80a1240280a21502150c0a030f1c180815021d80a3180815011d80a418080280a51d80a61808221e80a724150815081508150015020a050f1c1808221e80a8240a000f1c1807221e8071240a000f1f0615001f09180915203a17294444180015c1003f2a1806221e808024180018061e252c0a010f281500351f0018092d1f0916541800001f1e0280a92521444446044444060a4444271f06157f00050e44441b010b1e1480aa040007001f1f0280ab25124444110280ab1d80ac1118001d80ad001f200280ae251e44444604444406094444271f062000050c4444131e806801010007001f210280af251e44444604444406094444271f062000050c4444131e80b001010007001f220280b1251e44444604444406094444271f062000050c4444131e806101010007001f230280b2252e44441b010b0a1b010b23260a0010041b010b0a1b010b22260a001004281b010b0a1b010b21260a00100428001f240280b325244444131e80b41f0618061e809b0280b52818061e809c280280b52818061e80b628001f250280b7251a4444131e80b41f0618061e80b80280b52818061e80b928001f260280ba25806b44131e80bb020025805e440280bc131e2c4217804c44131e2c221e80bc240a000f221e80bd240200252e44441b030b0018001e80be0280b52818001e80bf280280b52818001e80c0280280b52818001e80c128041c000a010f1c160a444418000200041c001a01001f270280c225807c440280c31f0615001f0721131e2c1806194302044017104444131e2c1806191f07161b444421131e2c18061943020440170c4444131e2c1806191f0746044444060a4444271f09121f0805174444131e0b221e80c4240280c50a010f1c201f08070280c613421f0918070280b5281808280280b528180928001f280280c725806044131e1a1a001f061806221e80c82415010a010f1c1806221e80c92415050a010f1c15001806221e80ca240a000f291f071806221e80c924150b0a010f1c15001806221e80ca240a000f291f08131e22221e80cb24180718080a020f001f290280cc2580724446044444060a4444271f0602000005805f44131e0b221e806f240280700a010f1f061806221e809d240280cd0a010f1f071807221e80ce240280cf0a010f1f081807221e80d02418081e80d10a010f1f091807221e80d02418081e80d20a010f1f0a180902808628180a280007001f2a0280d32582a4440280d40280d50280d60a031f06131e081a001f07131e081a001f081806031f091809210417806c441f0a131e0b221e806f240280d70a010f1f0b180b0280d81d80d9180b1e80da0280db1d80dc180b1e80da180a1d80dd131e0b1e80de221e80df24180b0a010f1c1807180a180b1e80e00d1808180a180b1e80e10d131e0b1e80de221e80e224180b0a010f1c16bf930280e30280e40280e50280e60280e70280e80280e90280ea0280eb0280ec0280ed0280ee0280ef0280f00280f10280f20280f30280f40280f50280f60280f70280f80280f90280fa0280fb0280fc0280fd0280fe0280ff02810002810102810202810302810402810502810602810702810802810902810a02810b02810c02810d02810e02810f02811002811102811202811302811402811502811602811702811802811902811a02811b02811c02811d02811e02811f0281200281210281220281230281240281250281260281270281280281290a80471f0915001f0b271f0a271f0c15001f0d180d18091e253a1780f2441806031f0e180e21041780dd441f0f131e0b221e806f240280d70a010f1f1018100280d81d80d918101e80da0280db1d80dc18101e80da1809180d1902812a28180f281d80dd131e0b1e80de221e80df2418100a010f1c18101e80e01807180f19402201171044441c18101e80e11808180f19401f11131e0b1e80de221e80e22418100a010f1c181117805a44180d151e3a171244441501180d33180a301f0a163f4444180d151e3b22170a44441c180d153c3a171544441501180d151e2933180b301f0b161a4444180d153c3b171144441501180d153c2933180c301f0c1607444416bf22180d2d1f0d16bf0a180a221e152415100a010f180b221e152415100a010f180c221e152415100a010f0a03221e812b2402812a0a010f001f2b02812c2580f44415051f060a001f07131e2c1e80441f0818082201170744441c0a001f0915001f0a180a18063a1780af44460444440604444405809b441809180a191f0b0a001f0c15001f0d180d180b1e253a17354444180b221e812d24180d0a010f171e4444180c221e812e24180b221e812d24180d0a010f1e812f0a010f1c180d2d1f0d1646180b1e80ac0200281f0d180b1e813017114444180d180b1e8130020028281f0d180d180b1e8131020028281f0d180d180c221e812b2402000a010f281f0d1807221e812e24180d0a010f1c07180a2d1f0a16bf4f1807221e812b240281320a010f221e81332415001584000a020f001f2c02813425809b4421180143028135401705444400180002808b281f061801221e808924131e1002813602001a020a010f1f0715001f09180918071e253a1780604418071809191f081808221e80942415000a010f0281373e171844441808221e813824150118081e250a020f1f08165a1808221e2a2418060a010f15003e171744441808221e81382418061e2518081e250a020f0018092d1f0916bf9c001f2d0281392580734446044444060a4444271f060200000580604402001f06131e8068171d4444131e8068221e813a2418000a010f1f06180617074444180600131e80b0171d4444131e80b0221e813a2418000a010f1f061806170744441806001b010b2d261800131e0b1e813b0a02101f0618060007001f2e02813c25808944460444440604444405807c44131e806817154444131e8068221e806924180018010a020f1c131e80b017154444131e80b0221e806924180018010a020f1c14813d1f06131e0b180002813e281d813b131e0b180002808b2818012802813f28131e1a131e1a1a00221e1b240a000f1806281a01221e8140240a000f28028141281d813b07001f2f0281422525444446044444060d4444271f0618061e80ad00050f4444131e81430281441a011c07001f3002814525124444131e8146221e15240a000f1e25001f310281472581bb441b010b06260a00102201170d44441c1b010b08260a001017074444020000131e81482201170944441c131e81492201170944441c131e814a1f06131e80bb02002581744446044444060d4444271f0618000200041c05815e441b020b0617814f441b020b06131e081a0022131e081a002202814b1d814c0a011d814d1a011f06020025054444001f07131e1002814e02001a021f08131e1002814f0280741a021f091806221e81502402000a010f1c131e8151260200250d44441b030b000200041c001581f40a02101c1806221e8152240a000f1f0a180a131e80bb4117374444180a221e80bd240200251344441b030b06221e81532418000a010f000a010f221e80bd24020025054444000a010f1c162f44441806221e8152240200251c44441b030b06221e81532418001b030b071b030b070a030f1c0018070a020f1c1806020025806244180022170a44441c18001e815422170d44441c18001e81541e8154178042441b030b08221e81552418001e81541e81540a010f1f0618061726444418060b00221e805d241b030b090a010f1f071807170e44441b030b0018060b00041c001d8156160a444418000200041c07001a01001f3202815725805944028158221e807224131e100281590280741a020200253c4444131e22221e24240a000f15102a1500301f06180002815a3d170a44441806160c4444180615032f1508301f071807221e152415100a010f000a020f001f3302815b2580504418001e2515223e178043441b010b152615001800221e813824150015200a020f0a02101f061806221e15240a000f221e813824150015020a020f1800221e813824152015220a020f3e0012001f3402815c25805c441b010b2e02815d041f06180622170c44441c1b010b34180604170744441806001b010b33260a00101f0618061b010b1526150018060a021028221e813824150015220a020f1f061b010b2f2602815d18060a02101c1806001f3502815e2580bf4418001e251f0618061502331f0718011733444418001806150129191f0818071504291f07180818071503293a2201170a44441c180818073917064444260018081f0715001f08180818063a17804a4418001808131e8097221e80982418001808191580ff2f18001808191508351580ff2f18001808191510351580ff2f18001808191518351580ff2f0a040f0d18082d1f0816bfb41800221e812b2402000a010f1f081801171344441808221e813824150018070a020f001808001f3602815f2580814418001e251f0618061502341f07180615032f1500401709444418072d1f071801171c4444131e816018071501281a011f081808180718060d160e4444131e816018071a011f0815001f09180918063a172b44441808180915023423191800221e80802418090a010f180915032f15033333300d18092d1f0916521808001f37028161250b444418001481622f001f3802816325314444180215053518011502333118011503351802150433312818001801311805180315032f180431191802312831001f390281642518444418001e2515043a170a4444180015041d251800001f3a0281652580d24418001e251f0618061501291f0718001807191f0915001f0a131e22221e23241506153418062b280a010f1500301f0d180d150039178097441b010b38180a1b010b804f28041f0a180a15023515032f1f0b15001f0c180c18073a173c44441800180c150128191f081800180c1b010b381800180c191b010b3926180a18081809180c180b18010a061028040d271f09180c2d1f0c164118000b001f08180018071b010b3818001807191b010b3926180a180818091807180b18010a061028040d271f09180d2e1f0d16bf671800001f3b0281662581a744131e1002816702001a02221e132418000a010f170744441800000a001f0618001e251f0715001f0815001f09180818073a178165441800221e80802418080a010f1f0a180a1580803a17194444180618091800221e80942418080a010f0d16812b44180a1588003a172b444418061809131e8097221e8098241580c0180a15063430158080180a153f2f300a020f0d1680fa44180a15c0d8003a2201170c44441c180a15c0dfff391737444418061809131e8097221e8098241580e0180a150c3430158080180a150634153f2f30158080180a153f2f300a030f0d1680ae44180815012818073a178098441800221e80802418081501280a010f1f0b180a15c0dc003a22170c44441c15c0dc00180b3c22170c44441c180b15c0dfff3c17806244180a1583ff2f150a33180b1583ff2f3015c10000281f0c18061809131e8097221e8098241580f0180c151234153f2f30158080180c150c34153f2f30158080180c150634153f2f30158080180c153f2f300a040f0d18082d1f08160e4444131e81680281691a014718082d1f0818092d1f0916be991806221e812b2402000a010f001f3c02816a258067441800213e2201170944441c1800263e2201170c44441c18001e2515003e170744441800001b010b3c1800041f001b010b3c1801041f011b010b36261b010b3b261b010b37261800200a02101b010b3a1b010b37261801120a0210040a0210120a0210001f3d02816b2580a344131e0b1e80de1f06131e0b221e806f2402816c0a010f1f070280b5131e816d2615c02710131e22221e24240a000f2a150a0a0210280280b528131e1a1a00221e1b240a000f281f08180002816e180828281f00180718001d816f1318080200253144441b020b011800041c4604444406044444051c4444131e8170221e80e2241b020b070a010f1c131b020b080907000d1806221e80df2418070a010f1c001f3e02817125324444180001170744440200001b010b0b1504041f0618061b010b1b261b010b3d26180018060a02100281720a021028001f3f028173258145441801173b444415001f0615001f07180718001e253a1728444418001807191e817417154444180018071918011806222d1f06191d817518072d1f07165302001f061800221e8176240200251c44441b02220b061b010b0a18001e81750402817728281d8178000a010f1c18061b010b09260a0010281f061b010b33260a00101f07131e22221e23241807221e80802415030a010f15082b0a010f1807221e80802415030a010f15082c281f081807221e813824150415041808280a020f1f091b010b1b1b010b3d26180618090a0210180728041f061b010b8049221e817902817a131e817b1806042802808a28281d8179271f0a1b010b3e26180a0200253f444418001e817c15003d22170a44441c18001e817d172744441b010b80491b010b3f18001e817d041d817e1b010b2f2602817f18001e817d0a02101c000a02101c001f804002818025848144131e2c22170644441c1322170844441c131e0b011705444400131e081a00220281811d81822215041d8183221b010b80491e81811d8175131e081a00220281841d81822215031d8183221b010b091d8185131e081a00220281861d81822215031d8183221b010b241d8185131e081a00220280701d81822215031d8183221b010b1f1d8185131e081a00220281871d81822215031d8183221b010b091d8185131e081a00220281881d81822215001d8183131e081a00220281891d81822215001d8183131e081a002202818a1d81822215001d8183131e081a002202818b1d81822215001d8183131e081a002202818c1d81822215001d8183131e081a002202818d1d81822215031d8183221b010b251d8185131e081a002202818e1d81822215031d8183221b010b261d8185131e081a002202818f1d81822215011d8183131e081a00220281901d81822215011d8183131e081a00220281911d81822215011d8183131e081a00220281921d81822215001d8183131e081a00220281931d81822215031d8183221b010b271d81852215011d8174131e081a00220281941d81822215031d8183221b010b281d8185131e081a00220281951d81822215031d8183221b010b291d8185131e081a00220281961d81822215031d8183221b010b091d8185131e081a00220281971d81822215031d8183221b010b2a1d8185131e081a00220281981d81822215031d8183221b010b2b1d8185131e081a00220281991d81822215031d8183221b010b2c1d8185131e081a002202819a1d81822215031d8183221b010b091d8185131e081a002202819b1d81822215001d8183131e081a002202819c1d81822215031d8183221b010b2e1d81852202817f1d819d131e081a002202819e1d81822215031d8183221b010b301d8185131e081a002202819f1d81822215031d8183221b010b311d8185131e081a00220281a01d81822215031d8183221b010b321d81852215011d8174131e081a0022022e1d81822215011d8183131e081a00220281a11d81822215041d8183221b010b80481e81a21d8175131e081a00220281a31d81822215031d8183221b010b351d8185131e081a00220281a41d81822215031d8183221b010b091d8185131e081a00220281a51d81822215041d81830a221f060a001f07180608031f08180821041780e0441f0918061809191e81831f0a180a15004017234444180a15014017374444180a15024017804444180a150340178053441680a94418061809191b010b0a131e2c18061809191e818219041d817516808c4418061809191318061809191e8182191d8175168076441806180919131e0b18061809191e8182191d817516805e4418061809191e817417324444131e80bb172644441807221e812e2418061809191e8185221e292418061809191e819d0a010f0a010f1c16244444180618091918061809191e8185221e29242618061809191e819d0a020f1d817516bf1f131e80bb17364444131e80bb221e81a62418070a010f221e80bd240200251544441b010b8040261b020b0618000a02101c000a010f1c160d44441b010b80401806041c001f80410281a725832d442118004302024022170a44441c18001e81a8170e44441b010b200281a91a014715001f0615001f0715c0fff11f08131e1a1a00221e1b240a000f1583e82b1500351f091b010b80481e81aa0122173844441c1b010b16261b010b1626150018090200280a0210131e2e1e81ab221e813824131e2e1e81ac1e251502280a010f0a021018082c1f071809180718082a31150035221e152415020a010f1f0a180a1f0b180a1e25152039171b4444180a221e813824180a1e251520290a010f1f0b163a4444180a1e2515203a172f444402001f0c15001f0d180d1520180a1e25293a17124444180c021f281f0c180d2d1f0d1666180c180b281f0b0281ad1f0c0281ae1f0d0281ae1f0e0281af1f0f180f180e28180d28180c28180b281f06131e816d26180615020a02101f061b010b1626150018060200280a02101f101b010b13260a00101f111b010b8050221e81b0240281b118000a020f1c02001f1218001e80de22171a44441c131e808d221e808e2418001e80de0a010f02808f40173644440281b21b010b15261500131e808d221e808e241b010b192618001e80de18001e81b30a02100a010f0a02102802808a281f121b010b1818001e81a8041f1318001e81b4171a4444131e08221e81b524181318001e81b40a020f1606444418131f1318121b010b1a181304281f1218120281b6281b010b1718001e81a8042802808a281f1218120281b7280281b8281f121b010b8050221e81b0240281b918120a020f1c1b010b141811041f141b010b80481e81aa0122170d44441c1b010b1f260a00101f151b010b80491e818022170e44441c1b010b80481e81aa0122172144441c1b010b80491e817e2201171244441c1b010b3f1b010b2e02817f04041f161b010b804b1806041b010b804b18061481ba2b15003504281b010b804b181518063104281b010b804b1b010b162618101b010b80481e81aa0122170b44441c131e2c1e819b221e15240a000f0a021018082c1510331b010b1626181018120200280a021018082c3004281b010b804b18141508331b010b80481e81bb1504333018063104281b010b1d180704281f171b010b804b1500041c1816170b444418171816281f171817001f80420281bc253c444415001f0618061b010b80491e81bd1e253a172544441b010b80491e81bd180619221e132418000a010f17064444200018062d1f06165012001f80430281be25845a44131e81bf1e281f0618061e80621f0718061e81c01f0818061e81c11f0918061e81c21f0a1806020025804944111e81c3221e812e24131e081a00220281c01d81c4221b031d81c50a010f1c131e100281c602121a02221e132418000a010f170a44441118011d81c71b020b08111b0310001d81c01806020025134444111b031d81c81b020b0a111b0310001d81c218060200253e4444110a001d81c3111e81c3221e812e24131e081a00220280621d81c4221b031d81c50a010f1c1118001d81c91118011d81ca1b020b07111b0310001d80620281cb0280640281cc0281cd0281ce0281cf0281d00a071f0b18060200258362441b010b8043111e81ca0417834b44111e81ca221e2a240281d10a010f157f39170d44441b020b09111b0310001118001d81d2111e81d31f06111e81cb1f07111e80641f08111e81cc1f09111e81cd1f0a111e81ce1f0b111e81cf1f0c111e81d01f0d111e81d41f0e111e81d51f0f131e081a001f1015001f1118111b020b0b1e253a1721444418101b020b0b181119111e81d61b020b0b181119190d18112d1f111658131e081a001f11111e81c90281d73d1780d644131e100281d802121a02221e1324111e81c70a010f178082441811201d81b3111e81d217174444111e81d2221e80892402808a0a010f16054444261f12131e081a001f1318121780464415001f14181418121e253a1737444418131812181419221e80892402808b0a010f0b00131e81d91812181419221e80892402808b0a010f0b01040d18142d1f141644181118131d80de163f4444131e100281da02121a02221e1324111e81c70a010f171d44441811131e808d221e81db24111e81d20a010f1d80de160d44441b020b09111b031000111e81ca1f121b010b80491e81dc1e251500391780754415001f1318131b010b80491e81dc1e253a17804d441b010b80491e81dc1813190b001f141814221e1324111e81ca0a010f17254444111e81ca221e80722418141b010b80491e81dc1813190b010a020f1f12160c444418132d1f1316bfa91b010b8050221e81b0240281dd18120a020f1c181118121d81a8131e81d918111e81a80418111e81a83d171344441811131e81de18111e81a8041d81a81b010b80421811041f13111e81ca111e81ca221e2a240280840a010f157f40170e44440281df181328160a44440281e0181328281f14111e81c322171244441c111e81c30b001e81c40280623f170644442600111e81c31f1515001f16181618151e253a17354444181615003e1710444418151816191e81c518141d1e1118151816191e81c4191118151816191e81c5101c18162d1f161646111e81c8170f4444111e81c211111e81c8101c110281c3091118061d81d31118071d81cb1118081d80641118091d81cc11180a1d81cd11180b1d81ce11180c1d81cf11180d1d81d011180e1d81d411180f1d81d515001f1618161b020b0b1e253a17214444111e81d61b020b0b18161918101b020b0b181619190d18162d1f1616581b020b09111b0310001d81c1001f80440281e12580424415001f0618061b010b80491e81e21e253a172c44441b010b80491e81bd221e812e24131e101b010b80491e81e21806191a010a010f1c18062d1f061649001f80450281e32580404415001f0618061b010b80491e81dc1e253a172a44441b010b80491e81dc180619131e101b010b80491e81dc1806190b001a011d1f18062d1f06164b001f80460281e42580d5441b010b80481e81aa170644442600131e08221e81b5241b010b804918000a020f1c1b010b80491e818115003e2201172044441c131e22221e23241b010b80491e81810a010f1b010b80491e81813f170e44441b010b200281e51a01471b010b80491e81be178050441b010b80491e81e21e2515003e2201171144441c1b010b80491e81e21e812e01170e44441b010b200281e61a01471b010b8045260a00101c1b010b8046260a00101c1b010b8044260a00101c1b010b80491e818017144444131e8151261b010b804115000a02101c001f804721131e081e81b5430206401780c044131e08221e3324131e080281b5131e081a00220281b525808f441800263e2201170944441c1800213e170e4444131e81e70281e81a0147131e081800041f0615011f0718071b021e253a178058441b021807191f081808264022170944441c1808214017374444180808031f0918092104172944441f0a131e081e281e81e9221e29241808180a0a020f170e44441806180a1808180a190d165518072d1f0716bfa41806001f80481880481d804d22201d804e22201d81ea0a030f1c131e081e807e0117810644131e0802002580f644131e081e281e81e91f06131e081a0022261d15221e81eb2402150a010f011f0702150281ec0281ed0281e90281ee0281eb02110a071f0818081e251f0902002580b2442118004302064022171744441c211800430202402201170944441c1800263e170e4444131e81e70281ef1a01470a001f06180008031f0918092104172844441f071b020b06221e2924180018070a020f171144441806221e812e2418070a010f1c16561b020b071780444415001f0818081b020b093a173544441b020b06221e292418001b020b081808190a020f171644441806221e812e241b020b081808190a010f1c18082d1f08164618060000260a00101d807e131e081a00220281f01d81a22215011d81bb22121d81aa1f8048131e081a0022121d81f12215001d818122121d818022121d81be220a001d81e2220a001d81bd220a001d81dc220281f21d81791f804915001f804a0200252044441b011b010b804d1d81f31b0118001d81f41b010b1d180015023404001f804c271f804b0200252d44441b011b010b804e1d81f31b010b804a151c331800150435301f061b0118001d81f41b010b1d180604001f804d0200252a44441b011b010b804c1d81f31b010b1d1b010b804a151a33180015063530041b010b1c18000428001f804e1481f51f804f131e081a00220200252d44441b010b80491e81f122171e44441c131e37221e38240281f61800280281f7280281f818010a030f1c001d81b01f80501880481222170b44441c180c260a00101d81aa1880421f805118001880471d81e418001880511d81f9131e08221e332418000281fa131e081a0022201d804d0a030f1c000a02101c0081fb0007a28b129601511006a8960c61735b06aa9a0d79490109b298097227c2dbaa7506a3921649378d08a18d1a480146ee2103a69413068898115bc4da0ea5820a22dab6348739ac642fd99e04ae8fcb1708a392e62f9d0d7b320ca391ea10614ae9104357c6c909ae8cca07560947096c0e8e6e634dc1cfc7948417348f3b7408ae724020d3b943f90695677009aa520ba46c74269d2e88f3f5337301ae04b360521c0b8f52683f72cecabd41193308b3687b083db626b7219c674eed0e450f70b53f6d5dca862b3698e4f7150cbf40c6850f4cc7a554a35de806b46849eef23510b77f40f2d3cace991e248139744ced020ca06e42f7dd8d2a96296b51ca04836d4ecb07a06849e28f326b08a06b3597634af40007a5602ba67f027401f601f70cb573218c0744dff106228b003ef72260c24b56284470e7376157d482172c85ea110356a542c8ab2f55edbd40b25cd58ad99d2e1658cae9470442231e68e6b3841f4bc583341c46d4fbad9a048a75229405a179366b4306b577336b228406ab720e7f114e09a3770967e41959a0610f9c760541f3c0b0383c52aa7816157709b7680442dc9805154904a47a025307ae72162f9f3f2e088372162791c3be4e09a97f0f347f0c36b722129c701e0c55c9a87a580c318018161059b67508ab4fe3103898e1f607af48f00d0e54ed109c4de5ee1b133adae1b61448bd388ef50ea346e8f8f2cd851a79b73c95f6c6058e49efffd70ea340f7c9a94ccfb543da830f031002ae4208a342fac19cca8ef503a04de807a446f1b443c68303ab45c402e24807a145d8831f020e0aa858d98be0fa98f8bd520aae40df9cdca3cdb9183b0ba85ac06734b9f8a52485e30bae5ed6681070b524613e6b0aa95edf703308217febe806a05ed042f5db07b741ad4ace82d2109c5ba45ead58af4c2855c29ea34d98c10db75da852a91f0c78840aedc19007b75ab82090d9600b975ba537781a2c2e41ac36089848bc3a43cf70f70ba458bb0f1299c681d085f70b9865b5073852ab11e7d28705864eba1e1918845d8cf4f2cd79d946d378efb7ecfaa2e3d75ea3356b9f550fb05887eeda9dc5740fc8d661eed06c09b05b8bf1b65293eacb05b15e80ebb908b03299dd99dd5daa14981e84d46f100516e2af2078d944bb13e987d49713981d84d946db5fb8172342c685dd5894f3ba001b981c8da0239cb15680a44fabcc5880d44984e4519bd75698de5c8417981b89b53c268fb81230428a011fe4b10eeab0dc429ea315981a763d51b3001ef2c38e8b0219e0a6181c360a1b139819631b2b6ccc81a03b4bf4bc3b2f7f1ce98b1298186c1e0e2d5b85993871da63edb13671fc1598177b12e1c683de51a5325e11333b51dc4f7510ea1198166b0df1ae1cfee25d9bd34cc146b33d14981560efd944de7eecb2d0bd36367a1aeb9cdd5314981470eba82e2c7a1aedafc9558ea71def87b11a09983f7ff28ccb95a2160ca42c71caadbee8c97fe7bd3716981d44dd7fcc9eb90f050e5ce15c23e0db568e81c96d05aa2e50d95a0a9b7473a4635c9e28479e06a43048a506040fae3c4cb7e7cb6b1819d4b70cfd8ac009ae3d5684efbaf09ec804a824538209ae3b5a9bae303d486e07a838588d97ca7404a438246d0c83170956e18ad75aa3e1ab3512960c084fef40ff674fcb91c0f8086cb089c90eb43f3855a2071cdfba1be684d74807b43e3a6696c66b10b4333f5fb489c7045599da103a6aa6040ab538382d62c74ff5d0550c97313023448cca7a67fa6d0a0e8a0c0c392148a6e4c57a62cf4cbb0aaf0f0f0a2008f0da30320da41306080dc74fe3b9f361eab106a4030902f79f09b30c2e1cd94783dd9207b5011ee4ab13f5039b165b01a00aa9060ccd65cc42a1e4db149c071ec54a93a0afb3da3255966ec5bdf983c43c0fa30c0bd227529dca76d33d04eeb0ea03a305ee04a904e2ae07b704ebb8e19cb204af02e2b50bb30be29d8015fb70fb9aaf0ea61ce797b3cf5f66de81b21ffe8304ac15e18e0bb415f968d09abfe0ab12a10aa41afe62ef5c61f6b68604b417c07407a011d27481c33922ef1ddd5885d68b8c7ecec303ee65cb16b5a52cc1309989811270a3c853ea3fb67cdc01f806b402d2335d8201e808a01cc3022f08ef6f0e9c45e6762bc17e5ea9c8e1bbf7ea05b40bd20efa01e101fa07a81ca3d6b3c52f048d2c83c009b4f4a2f07edc0ef07402bcfc04b4eda5d807a8e1b0870a00cb0ea5e5ada5408a20cc07f47984a8a4804083ee85b8ec9bcc5ce1361816498a5df2e692a8e08037f7b4a527d4cb888898bcfeee318bef2d1184465d9c9dcae7243e85536dbfbec1ae0b24ae709c14f5506406a4ee84a1e64e08f6b1dded8a47f3b409a5e99f82ed8a28a5e50694fd9d869e930ca1f89c974ed517b4cc69d53806a5bdc25c970812a4ed9478a0f2bdb0d01fd9e5949695839d7e05b0e49962be06afeb68c65a6a0aa0ea70e92535f2967cc402f5f40af6a57bc55ba4dbf3808804a1fd61bc08a1fa7ebdfb3ef275045f8536610ab4fd78808ead88cf37230bb4fe7298b2479a529b5c4a04abfe4d9d09b4f04b74f20ac43e0a03a6eb4406b4ee5979888109a0fe5a5c9b718a47630af4ab011f2edacc26d4dc0f84f25b544579b950748875b6f5513a04a9ff545807aafa4f3501c52d11afc13302199a894f7a8550b4f54e33ed720fafc03015fe7d61da2d8777844376820cabcd2405c23bcee77eb6b4af0cafc23924abc6290e858e40840ca0c13a3980856aa1da07aab10da0c025d2925264b9bab5f6241406b4c527ee768601980aa4c730f03528afc6f16312a0cc2be62ac33be74864b0c605bfcac836c80aa6dc02db15bc60b1a0bb0ba6dd07d2fc6e7b62bb80730ea0c91e84cc1ba1b0a4a3ac6faed40797df02a3abd6380aa0cb059bbf98648e7d9304b3c7118c08a4d8199f7599726c0ca4d91a87404c4f7f57a6a3a80fa3db0c63acce099d5039c436a8c2e605abd6f46cb70ca0d1f24097462412b25001a10eaad4f148629d6e82449121ec60710ba4c4e8465d4a7a1eb5bb960a93d8e5532929af8f78710ca8d6e05428d0e35b462dfc400ba0dce3171b84768728ef7607b4dfef0aee462e08b4deea1ac903ab9511a0d9d636aadbf230e44022c9435524d7e303aad4cb06a0dbdd32844605b0dace19600ca0a5c4cc504338d3dde35e3d199084f1d67133876895341c52892acc179b29a1bebe7f724a3a0ca0a7c3cc3bc4fc32a0b1a3b815928df7e422bb6a09c60ef2eb3d43af07eafff6e1c817928af3f1dd712c9b58be6f08c97a2f5c726c34994e42b808a0a0b5fecc019a5e09aaa9abacccc6c00e890ab4a6a6bffa805f1f844805b4adbebe9504b4b9aeb10daaa7be87485401805d34acafa209aea5b8964e3c55af5a05b4b8a3923c04f0ffad7e08a1a18f65599329d70aa1a08a6e6456019b2ef204a5bf8c5c0ba6a19b483dd7e7e84e25fb0ba8b4894b158909bb9139c20ca8b59432e243386580570b970bb5b19b23d2e4693aded8ca0c93a79c36ccd5d8c7f40c16820693b79530b89c0d8ab8648d5f34eca4595b332d0e1385b7609c27c85e1f609c958d4324c4fa1569451280bc68a832b664dd50c1788dfbc9349e9051148ab368749413b17c454bae0a9101337532a06e6a0d84b46366713b610c6f877585ba0990b57c7d4b0d845df00d8a8e357125f4012f4b551f6f60138bab7a440480041ed5d9ccf45f7c4e3f8d561e0794a67050197b500f8a894333fb169f2bc29e8a69467b2e0894844426ccba23540f8a8d4933a988590e63397ae624c9bf0a848c442ea97f2ce9e85d0c948149079f48af0c7d493ccf098ab61137606929f5e20b948f58285e0ad9189c43c5128a8e56e30fc8d803ab7ed004e192a54cf315088abc1cca279c32fc05809c53fe1905838537d7fc0a8b8e23c7c9d5f5167b281497802bd8b18a2cd9b67a25ef484a38830b6e7d2c05939823d9bb068a8b38bb8f0708809a38bb6366379406918231b34e0d09849e298156c0c22f070b869c38833d8530f15c53e6098683038b124f0a8be7078e860f77457f3e098a9a0660670b71705b0a8b931b722fc2d8ef5c63088996024b309b26bc089799184a0146ef200b85980458ef177f4d057a2d1185951455cacfafd1257637c21abf682ddf1586891726d2c9078b3ea37726d8cc28406b9740fde310818ee737a846f41d49a1058f167832ca128b88e63394093505a395ef3498e7ec0a24a30a8491e50a6241e644436c0c8490e31e411e01247829a87808976c7140c2cac7ac0f8c747d32c1b454e25f068e184d0630088d6d7c29a04f0a4c0e8e6d7c3a9b319cfca10e6e73094c0997656c036e4b122ccb108577400c773e85b0cb027a34c72847120a8a55053c42d6c3bf4b1c12846246083aad31f0761938870a720c58c1b209937f0cc40e485b1db20c806043e3a00f624b0873bd2e06885a67d3d0e406817e42d6c6810e8f6956d8b45def135b94a80155121884624dc6832d7e29ae5deea12e41e8d88a0004c4ea10326713976b33b16752f40400212394346c58d5c93e190686590184533110857126b25acbed76e30251d18f40513d11947825b52ab333d3d5163c90f5f398b7ee148f7b3d890f40e2ea54068c094ef5d9d6c7d8b4180c86613b90134356162aac33740a94752093e5c8f80993160984742a7054ced264450e857a3c6c26881427b64ee4503a07139360405b0048aac82d7c560b45f9de693580171284771453e41f4caf741742b2d8af600f5ea30a8a403562d7e7e448397412865e2474f6cc3b247edef25f125f593566f412806e045eb846e4f18db10956a6791e775f2901eb04ad721c3c0aa07b0d0d741825b13e8e04ae6b190b04b755f31904b358f31c07b147f5f7171f2008a14ae6e8fbcb8d0d02e40705b449f8c3a20aa043e1ed911f3f5b247706b453eadd95ca049c13bae201e709b45fc1a13d81f4a95609a04ed2980f41d994dc07a049deaf09120406a442c285fbc809b44bc5bac19bcfb4090bf41e813170c1adfc73dda731fa0b98681a48b93f632522dbae43900397dbbb87013d34b597c9f463316d7e375f4eb2962130341601d8a41ae99bf647490afc11de6d0704277ffba10bb35df86dc0e47b1e3f4efd09fc13b248df999cf5510ea051b267b155af0d2062df8fa94c099050ab6fb2130a599510845ebf2894d2332d18e7c9bf3b46a74c0fa052a41e7000042a56812a7be2eab604a24eb53708a05ca3313692ee9f11956e983e3a5fad3fe9ce8cedcb8dad2e9414aa54a4252236230a03235ef3b517e0c787d046ac17b05980e9faca79e86be778f8acc1f28fe2dc49b22470c31cb44990e49287c76413a2df3becdc77f1be0c4d365cb2b4f4761afb5304b24c85e60aae5c89cdb90a09f4cd403eef1bc084c1e24afe770994b7bbb2b9a2e6631c785845591350eeeff2b32be59a51c8f1aeb6c57e1633f5e44df8738445e5bed68be230aae0e52af4d9a09a359969c2883f28594ea2f20e09c003ec46c0c892c7f41821f7f37d75fe0fbaff503844529251bbf8b38dfc8b144b8de4ccc8dd92aefd11a43092dd5edb75b0162f5ecb92d25a84fe0ab4268e912895a65083b50ba4369bb12a27b2b702304213b42075145cb4131bc0c38fb70313e2bb01070709a4276b07267ac483a004a23f6d0f0ea8266514e6c190d943a92460103804b23c661b20bf326bf2cd59c86fe1a7f7b06c397003e294c04f8da900e38ba802dc76e08aac049c336fce01bf0da42578c59598e8c574e0bc132c0ba02b55f276cb92a216132305b33b47d3560eb33f6aac2047b13577b5384bd12f0db33e7ea40d2f7b28e97ef5da470586205db9f905ae3d46d2a50af3660fd88d1ff95e41a202aa2d04a13f459412a239237a04d2743912cf7541bc94f5b700110ab22c222bdc87d145b3ed0e99021b639e2f976374b9b2d997680582283949b9108a3a22498dd16b1aca05bc0dd164f99605bf24265f9e05ad2e3a2c6406b43d2b24409d08b73e2e252d6fbcf509a4010c0d060ce7d46e03b4130001850da20d090fd456a2dcbbc653dc25804086262dcc8f36d7a9e563a9fe765ce261adaba1b6ee0c3ed7b6badd01e6bfd6363d1cdf3617a1f57ba1ee568c6aa9bde361a2bceb20fe9f6abcca1f24e5eee4890ea61602f5b2c779cb7e8ea0eab7d201b701b507a1070eea4e93bc02993701f10ca11bd6b917cc4188de00253103f81db712a203eeb1ce4cb29123ce8aaf1cf96eef8ab208b50be5b6a51ffe6102a11f0e9812e1899f90b9b715fc4ad90be407b305c476ec80af03a314ef03a61ac601a901a109b402cc4565e7202c4b01b309a61add272c437ca4030ab310da362919fc7bb64e08b716da2a11d9270e13af1acc03f9909bb3eb5974b6dc4e5f6dc3292d0ca319b41bc85f6c86a4e698a708ab1cab1db511ce5d09ab1fa7e2a9d63c13c80ab51abfe1988181916ef60fa6f6b1f07ce902e562db14ff9c907709b4e2a1c4409eb989a60ab4e1a5c927546b9d62d710a3e6acdc3a11e90fe073befb223122340ab7f6b1a403dd07eb13f807a5e495bcee818109b3e990b0cf734560c408b3ee85b9c518aae30ab3e18182a8ca16abfdcd07a0f99aa69e92900badf9b59563c9058ae675c50bb7e78364cd565847d50bbb0ab3e5976bb2f583bbc94209b2fe986497d00fc53a0aa2f864d3717182986ac901aa0bb4e966c107da7c41576cdd0ca9f07fd40db2f2e48789884805b5e66c81c809a1e344b4dd28e36ec50b98cb60b9bed62d3c17869508a4f970818fae83c70ab3ff708a8e559d4c8e1c0ba2ef549d7bba90aaf14c9b03a6f4480ca0fc5358affc5e477aa6b2f703b2e8472ca9f4407c9f3f915363aef4a4c1701e9b3d6da2f62606cfb3475320fe1c3d8d0d87421e17bcbea98b565838570ba3f35f64789ca2728d8c9404afef505408b7ec56492706c10a04f7af0c7608f79070614cd9ca1702f69105a3c72511c905a9cc240ea00aa5cb2a01bd8467bbc6530ba5ca35f9a14067e7bcb5ed05b6d330f96a06a6d42bfd4c4b09b7c928f7290da7d3b809b3dd00d039c03bef2706e1df16db1dd608a9c408d8f5756a790af39e53f29459e2e7efec09a1c83babb0d634c5020daedd34b7bf8e7c8e6bba6e987e1498ca1a8394454c7a4f4d3dd026fc441612905d2409aede0c886093797b950e9ffc37bd5351514a66bebba8b8b310b4d70b52a1de0e9f4a23eb07a0cbe66404b4d6ec6d10a8c2e3668a5a231fb6570aab85a09e411598d7f068688c52837a8a2df07767a69d467e6ba88e04a1c3e34409a6c5f7452c09b79e650e99dbfb5529d6e55c1f38f74431810e98dbee37178d4c9e28ef6764bb9c1198d5ed2bfd4022ee4c7a32dbfe0ccbe42f0d98d9e723c30980902cfc4f5a3d0a98dedb16a6d2c83ff94207a8d3c408b79e6b06a8d0c51a955709a8d1c0116d944e51160ba8aedce649532ec9cff8450aa8afc3e3520b9168843209a8acc3f537d3f22ab10b98b0d3c21f915b38eb3d8a0b98a6c7c4eb5e36bd68885312a8abb3ddc20b975e3ff622d0c01f6b9531de0cb5a3b6b3d0d8d208b85239f007b3aea5a9b8864e06b2b8a0b8925e0497869c8b21a6baa3864c5a0d995936ae9fe4983b69441fc358e84ce468e9057753154b35bc7112a3aeb59c581154b05f5a4e5b1c9b27fb1a7811a6bcaa9230ded9d9fb3fc2cf7ad1c8d3ae05b7acaf758b0fb2bc8d436f8d21dbd5125d796a9d250bb5aa93735052189717f92e09a2be8b4a5a1b4a602a0ce18e984434ddc5f4523bfa4a0cf88d9c5117933fa6803fcfa910a0b69c11e643184c804317b1412fc6ff0ea2ba972ec8e47a33c3dce2c90d5e12a0b09701cbdae2c7f75e32a59c0cb97f4a1104aeb8942b1ea8a774814234ec8b5f113b5650f936a4b96e14b0089f69dcdfaa606f7e6227a8a8709a26cf5e4d3cdda48c4718c9ed1c555ff34ea41bac5b04855e0b07641ecffce33c832ee40993a0779e1ba57492152a84bb65689414fe795e058b0e8d06335339b6626a7350fc1918e210d81e6822a6217f4a47624f142faa730eafba7d406575621f6e8430ba9d450ca4b37c7c46039f48e258e92414b7af7a5221e8067651432868736a6f614b0795090eb3b1554203804828e7c3cdbd647507b1be70431d51580dae937033fb119f39cfceb64768208883492ccaee58765aec1e2a774f1c7a53e372a066382fc7c59ea79cec3e931205f5cc177af603a58c4f29af905a188952d34077582edcff7a784bfd026822470e97554cfbf5f5399c56499ee76f4c0804b653f102f0d002f0d20af5d10db07792b86bd50c03e28b1c02ead70da4852fcde35ddc1e07b963be1704b48221c50a98b32fc588842fc9b47a", []);

byted_acrawler.init({
    aid: 24,
    dfp: true
});
if (typeof window == "undefined") {
    global["location"] = {
        // origin: "https://www.toutiao.com",
        protocol: "https:",
        // host: "www.toutiao.com",
        // hostname: "www.toutiao.com",
        // port: "",
        // pathname: "/ch/car_new_arrival/",
        // search: "",
        // hash: "",
        href: "https://www.toutiao.com/ch/car_new_arrival/",
    };
    global["navigator"] = {
        userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36"
    };
}
{
    const url = "https://www.toutiao.com/toutiao/api/pc/feed/?category=car_new_arrival&utm_source=toutiao&widen=1&max_behot_time=0&max_behot_time_tmp=0&tadrequire=true&as=A1D53E259733359&cp=5E57736375B9BE1";
    const sig = byted_acrawler.sign({
        url: url
    });
    console.log("_signature=" + sig);
    console.log(url + "&_signature=" + sig);
}
//# sourceURL=signature_debug.js
